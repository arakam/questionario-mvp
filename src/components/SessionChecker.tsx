'use client';

import { useEffect, useRef } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import { createClient } from '@/lib/supabaseClient';

export default function SessionChecker() {
  const router = useRouter();
  const pathname = usePathname();
  const supabase = createClient();
  const isChecking = useRef(false);
  const lastCheck = useRef(0);
  const hasValidSession = useRef(false);

  useEffect(() => {
    const checkSession = async () => {
      // Evita verifica√ß√µes simult√¢neas
      if (isChecking.current) return;
      
      // Evita verifica√ß√µes muito frequentes (m√≠nimo 10 segundos entre verifica√ß√µes)
      const now = Date.now();
      if (now - lastCheck.current < 10000) return;
      
      isChecking.current = true;
      lastCheck.current = now;

      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (!session || error) {
          console.log('üîç SessionChecker: Sess√£o inv√°lida, redirecionando para login');
          hasValidSession.current = false;
          router.replace('/admin/login?error=Sess√£o expirada');
          return;
        }

        // Se j√° temos uma sess√£o v√°lida, n√£o verifica admin novamente
        if (hasValidSession.current) {
          console.log('‚úÖ SessionChecker: Sess√£o j√° validada, pulando verifica√ß√£o de admin');
          return;
        }

        // Verifica se o usu√°rio √© admin apenas uma vez
        try {
          const { data: adminData, error: adminError } = await supabase
            .from('admins')
            .select('id')
            .eq('email', session.user.email)
            .limit(1);

          if (adminError || !adminData || adminData.length === 0) {
            console.log('üîç SessionChecker: Usu√°rio n√£o √© admin, redirecionando');
            hasValidSession.current = false;
            router.replace('/admin/login?error=Acesso negado');
            return;
          }
          
          console.log('‚úÖ SessionChecker: Sess√£o v√°lida e usu√°rio √© admin');
          hasValidSession.current = true;
        } catch (error) {
          console.error('‚ùå SessionChecker: Erro ao verificar admin:', error);
          // N√£o redireciona por erro de verifica√ß√£o
          // Permite que o usu√°rio continue navegando
        }
      } catch (error) {
        console.error('‚ùå SessionChecker: Erro ao verificar sess√£o:', error);
        // N√£o redireciona por erros de rede/conex√£o
      } finally {
        isChecking.current = false;
      }
    };

    // Verifica a sess√£o apenas na primeira carga
    checkSession();

    // Configura listener para mudan√ßas na autentica√ß√£o
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('üîç SessionChecker: Mudan√ßa de auth detectada:', event);
        
        if (event === 'SIGNED_OUT' || !session) {
          console.log('üîç SessionChecker: Usu√°rio deslogado, redirecionando');
          hasValidSession.current = false;
          router.replace('/admin/login?error=Sess√£o expirada');
        } else if (event === 'SIGNED_IN') {
          console.log('‚úÖ SessionChecker: Usu√°rio logado com sucesso');
          hasValidSession.current = false; // Reset para verificar admin novamente
        }
      }
    );

    // Cleanup do listener
    return () => subscription.unsubscribe();
  }, [router, supabase]);

  // N√£o verifica a cada mudan√ßa de rota
  // Apenas monitora mudan√ßas reais de autentica√ß√£o

  return null; // Este componente n√£o renderiza nada
}
